// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/iot/iot.go
//
// Generated by this command:
//
//	mockgen -source=pkg/iot/iot.go -destination=pkg/iot/mocks/mock_iot.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	models "liyu1981.xyz/iot-metrics-service/pkg/models"
)

// MockIMetric is a mock of IMetric interface.
type MockIMetric struct {
	ctrl     *gomock.Controller
	recorder *MockIMetricMockRecorder
	isgomock struct{}
}

// MockIMetricMockRecorder is the mock recorder for MockIMetric.
type MockIMetricMockRecorder struct {
	mock *MockIMetric
}

// NewMockIMetric creates a new mock instance.
func NewMockIMetric(ctrl *gomock.Controller) *MockIMetric {
	mock := &MockIMetric{ctrl: ctrl}
	mock.recorder = &MockIMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMetric) EXPECT() *MockIMetricMockRecorder {
	return m.recorder
}

// UpsertMetric mocks base method.
func (m *MockIMetric) UpsertMetric(deviceID string, input *models.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMetric", deviceID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMetric indicates an expected call of UpsertMetric.
func (mr *MockIMetricMockRecorder) UpsertMetric(deviceID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMetric", reflect.TypeOf((*MockIMetric)(nil).UpsertMetric), deviceID, input)
}

// MockIAlert is a mock of IAlert interface.
type MockIAlert struct {
	ctrl     *gomock.Controller
	recorder *MockIAlertMockRecorder
	isgomock struct{}
}

// MockIAlertMockRecorder is the mock recorder for MockIAlert.
type MockIAlertMockRecorder struct {
	mock *MockIAlert
}

// NewMockIAlert creates a new mock instance.
func NewMockIAlert(ctrl *gomock.Controller) *MockIAlert {
	mock := &MockIAlert{ctrl: ctrl}
	mock.recorder = &MockIAlertMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAlert) EXPECT() *MockIAlertMockRecorder {
	return m.recorder
}

// CheckAndStoreAlerts mocks base method.
func (m *MockIAlert) CheckAndStoreAlerts(deviceID string, metric *models.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndStoreAlerts", deviceID, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAndStoreAlerts indicates an expected call of CheckAndStoreAlerts.
func (mr *MockIAlertMockRecorder) CheckAndStoreAlerts(deviceID, metric any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndStoreAlerts", reflect.TypeOf((*MockIAlert)(nil).CheckAndStoreAlerts), deviceID, metric)
}

// GetDeviceAlerts mocks base method.
func (m *MockIAlert) GetDeviceAlerts(deviceID string) ([]models.Alert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceAlerts", deviceID)
	ret0, _ := ret[0].([]models.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceAlerts indicates an expected call of GetDeviceAlerts.
func (mr *MockIAlertMockRecorder) GetDeviceAlerts(deviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceAlerts", reflect.TypeOf((*MockIAlert)(nil).GetDeviceAlerts), deviceID)
}

// MockIConfig is a mock of IConfig interface.
type MockIConfig struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigMockRecorder
	isgomock struct{}
}

// MockIConfigMockRecorder is the mock recorder for MockIConfig.
type MockIConfigMockRecorder struct {
	mock *MockIConfig
}

// NewMockIConfig creates a new mock instance.
func NewMockIConfig(ctrl *gomock.Controller) *MockIConfig {
	mock := &MockIConfig{ctrl: ctrl}
	mock.recorder = &MockIConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConfig) EXPECT() *MockIConfigMockRecorder {
	return m.recorder
}

// UpsertConfig mocks base method.
func (m *MockIConfig) UpsertConfig(deviceID string, input *models.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertConfig", deviceID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertConfig indicates an expected call of UpsertConfig.
func (mr *MockIConfigMockRecorder) UpsertConfig(deviceID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertConfig", reflect.TypeOf((*MockIConfig)(nil).UpsertConfig), deviceID, input)
}
