// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pkg/grpc/service.proto

package iot_metric_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IOTService_PostMetrics_FullMethodName  = "/IOTService/PostMetrics"
	IOTService_UpdateConfig_FullMethodName = "/IOTService/UpdateConfig"
	IOTService_GetAlerts_FullMethodName    = "/IOTService/GetAlerts"
	IOTService_PostLimiter_FullMethodName  = "/IOTService/PostLimiter"
)

// IOTServiceClient is the client API for IOTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IOTServiceClient interface {
	PostMetrics(ctx context.Context, in *PostMetricsRequest, opts ...grpc.CallOption) (*PostMetricsResponse, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error)
	GetAlerts(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*GetAlertsResponse, error)
	PostLimiter(ctx context.Context, in *PostLimiterRequest, opts ...grpc.CallOption) (*PostLimiterResponse, error)
}

type iOTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIOTServiceClient(cc grpc.ClientConnInterface) IOTServiceClient {
	return &iOTServiceClient{cc}
}

func (c *iOTServiceClient) PostMetrics(ctx context.Context, in *PostMetricsRequest, opts ...grpc.CallOption) (*PostMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostMetricsResponse)
	err := c.cc.Invoke(ctx, IOTService_PostMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOTServiceClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConfigResponse)
	err := c.cc.Invoke(ctx, IOTService_UpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOTServiceClient) GetAlerts(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*GetAlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlertsResponse)
	err := c.cc.Invoke(ctx, IOTService_GetAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iOTServiceClient) PostLimiter(ctx context.Context, in *PostLimiterRequest, opts ...grpc.CallOption) (*PostLimiterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostLimiterResponse)
	err := c.cc.Invoke(ctx, IOTService_PostLimiter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IOTServiceServer is the server API for IOTService service.
// All implementations must embed UnimplementedIOTServiceServer
// for forward compatibility.
type IOTServiceServer interface {
	PostMetrics(context.Context, *PostMetricsRequest) (*PostMetricsResponse, error)
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error)
	GetAlerts(context.Context, *DeviceRequest) (*GetAlertsResponse, error)
	PostLimiter(context.Context, *PostLimiterRequest) (*PostLimiterResponse, error)
	mustEmbedUnimplementedIOTServiceServer()
}

// UnimplementedIOTServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIOTServiceServer struct{}

func (UnimplementedIOTServiceServer) PostMetrics(context.Context, *PostMetricsRequest) (*PostMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMetrics not implemented")
}
func (UnimplementedIOTServiceServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedIOTServiceServer) GetAlerts(context.Context, *DeviceRequest) (*GetAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlerts not implemented")
}
func (UnimplementedIOTServiceServer) PostLimiter(context.Context, *PostLimiterRequest) (*PostLimiterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLimiter not implemented")
}
func (UnimplementedIOTServiceServer) mustEmbedUnimplementedIOTServiceServer() {}
func (UnimplementedIOTServiceServer) testEmbeddedByValue()                    {}

// UnsafeIOTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IOTServiceServer will
// result in compilation errors.
type UnsafeIOTServiceServer interface {
	mustEmbedUnimplementedIOTServiceServer()
}

func RegisterIOTServiceServer(s grpc.ServiceRegistrar, srv IOTServiceServer) {
	// If the following call pancis, it indicates UnimplementedIOTServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IOTService_ServiceDesc, srv)
}

func _IOTService_PostMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServiceServer).PostMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IOTService_PostMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServiceServer).PostMetrics(ctx, req.(*PostMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOTService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IOTService_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServiceServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOTService_GetAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServiceServer).GetAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IOTService_GetAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServiceServer).GetAlerts(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IOTService_PostLimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLimiterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServiceServer).PostLimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IOTService_PostLimiter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServiceServer).PostLimiter(ctx, req.(*PostLimiterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IOTService_ServiceDesc is the grpc.ServiceDesc for IOTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IOTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IOTService",
	HandlerType: (*IOTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostMetrics",
			Handler:    _IOTService_PostMetrics_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _IOTService_UpdateConfig_Handler,
		},
		{
			MethodName: "GetAlerts",
			Handler:    _IOTService_GetAlerts_Handler,
		},
		{
			MethodName: "PostLimiter",
			Handler:    _IOTService_PostLimiter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/service.proto",
}
